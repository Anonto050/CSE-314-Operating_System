diff --git a/Makefile b/Makefile
index 39a99d7..a498f6b 100644
--- a/Makefile
+++ b/Makefile
@@ -125,14 +125,17 @@ UPROGS=\
 	$U/_ln\
 	$U/_ls\
 	$U/_mkdir\
+	$U/_myprog\
 	$U/_rm\
 	$U/_sh\
 	$U/_stressfs\
+	$U/_printid\
 	$U/_usertests\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
 
+
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
 
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..d3eb072 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             getuid(void);
+void            setuid(int);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..bf11f0f 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -681,3 +681,18 @@ procdump(void)
     printf("\n");
   }
 }
+
+// global variable for user id
+int uid = 100;
+
+// return user id
+int
+getuid(void) 
+{
+  return uid;
+}
+
+void
+setuid(int num) {
+  uid = num;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..8f0e5df 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_getuid(void);
+extern uint64 sys_setuid(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_getuid]   sys_getuid,
+[SYS_setuid]   sys_setuid,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..540279d 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getuid  22
+#define SYS_setuid  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..9f34660 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_getuid(void)
+{
+  return getuid();
+}
+
+uint64
+sys_setuid(void)
+{
+  int pid;
+
+  argint(0, &pid);
+  setuid(pid);
+  return 0;
+}
diff --git a/user/myprog.c b/user/myprog.c
new file mode 100644
index 0000000..d9514b8
--- /dev/null
+++ b/user/myprog.c
@@ -0,0 +1,18 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+int main()
+{
+   printf("hello world\n");
+   char buf[10];
+   gets(buf, 9);
+   int num = atoi(buf);
+
+
+   printf("%d^2 = %d\n", num, num * num);
+
+
+   return 0;
+}
diff --git a/user/printid.c b/user/printid.c
new file mode 100644
index 0000000..2ea7749
--- /dev/null
+++ b/user/printid.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+int main()
+{
+   
+    int uid = getuid();
+
+
+   printf("%d\n", uid);
+
+   char buf[10];
+   gets(buf, 9);
+   int num = atoi(buf);
+   setuid(num);
+   
+   uid = getuid();
+
+
+   printf("%d\n", uid);
+
+
+   return 0;
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..364e87b 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int getuid(void);
+int setuid(int);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..680f683 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("getuid");
+entry("setuid");
